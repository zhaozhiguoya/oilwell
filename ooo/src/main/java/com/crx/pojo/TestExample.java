package com.crx.pojo;

import java.util.ArrayList;
import java.util.List;

public class TestExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table test
     *
     * @mbg.generated Tue Jul 30 21:22:56 CST 2019
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table test
     *
     * @mbg.generated Tue Jul 30 21:22:56 CST 2019
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table test
     *
     * @mbg.generated Tue Jul 30 21:22:56 CST 2019
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated Tue Jul 30 21:22:56 CST 2019
     */
    public TestExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated Tue Jul 30 21:22:56 CST 2019
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated Tue Jul 30 21:22:56 CST 2019
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated Tue Jul 30 21:22:56 CST 2019
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated Tue Jul 30 21:22:56 CST 2019
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated Tue Jul 30 21:22:56 CST 2019
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated Tue Jul 30 21:22:56 CST 2019
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated Tue Jul 30 21:22:56 CST 2019
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated Tue Jul 30 21:22:56 CST 2019
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated Tue Jul 30 21:22:56 CST 2019
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated Tue Jul 30 21:22:56 CST 2019
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table test
     *
     * @mbg.generated Tue Jul 30 21:22:56 CST 2019
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andTidIsNull() {
            addCriterion("tid is null");
            return (Criteria) this;
        }

        public Criteria andTidIsNotNull() {
            addCriterion("tid is not null");
            return (Criteria) this;
        }

        public Criteria andTidEqualTo(String value) {
            addCriterion("tid =", value, "tid");
            return (Criteria) this;
        }

        public Criteria andTidNotEqualTo(String value) {
            addCriterion("tid <>", value, "tid");
            return (Criteria) this;
        }

        public Criteria andTidGreaterThan(String value) {
            addCriterion("tid >", value, "tid");
            return (Criteria) this;
        }

        public Criteria andTidGreaterThanOrEqualTo(String value) {
            addCriterion("tid >=", value, "tid");
            return (Criteria) this;
        }

        public Criteria andTidLessThan(String value) {
            addCriterion("tid <", value, "tid");
            return (Criteria) this;
        }

        public Criteria andTidLessThanOrEqualTo(String value) {
            addCriterion("tid <=", value, "tid");
            return (Criteria) this;
        }

        public Criteria andTidLike(String value) {
            addCriterion("tid like", value, "tid");
            return (Criteria) this;
        }

        public Criteria andTidNotLike(String value) {
            addCriterion("tid not like", value, "tid");
            return (Criteria) this;
        }

        public Criteria andTidIn(List<String> values) {
            addCriterion("tid in", values, "tid");
            return (Criteria) this;
        }

        public Criteria andTidNotIn(List<String> values) {
            addCriterion("tid not in", values, "tid");
            return (Criteria) this;
        }

        public Criteria andTidBetween(String value1, String value2) {
            addCriterion("tid between", value1, value2, "tid");
            return (Criteria) this;
        }

        public Criteria andTidNotBetween(String value1, String value2) {
            addCriterion("tid not between", value1, value2, "tid");
            return (Criteria) this;
        }

        public Criteria andWellTextIsNull() {
            addCriterion("well_text is null");
            return (Criteria) this;
        }

        public Criteria andWellTextIsNotNull() {
            addCriterion("well_text is not null");
            return (Criteria) this;
        }

        public Criteria andWellTextEqualTo(Integer value) {
            addCriterion("well_text =", value, "wellText");
            return (Criteria) this;
        }

        public Criteria andWellTextNotEqualTo(Integer value) {
            addCriterion("well_text <>", value, "wellText");
            return (Criteria) this;
        }

        public Criteria andWellTextGreaterThan(Integer value) {
            addCriterion("well_text >", value, "wellText");
            return (Criteria) this;
        }

        public Criteria andWellTextGreaterThanOrEqualTo(Integer value) {
            addCriterion("well_text >=", value, "wellText");
            return (Criteria) this;
        }

        public Criteria andWellTextLessThan(Integer value) {
            addCriterion("well_text <", value, "wellText");
            return (Criteria) this;
        }

        public Criteria andWellTextLessThanOrEqualTo(Integer value) {
            addCriterion("well_text <=", value, "wellText");
            return (Criteria) this;
        }

        public Criteria andWellTextIn(List<Integer> values) {
            addCriterion("well_text in", values, "wellText");
            return (Criteria) this;
        }

        public Criteria andWellTextNotIn(List<Integer> values) {
            addCriterion("well_text not in", values, "wellText");
            return (Criteria) this;
        }

        public Criteria andWellTextBetween(Integer value1, Integer value2) {
            addCriterion("well_text between", value1, value2, "wellText");
            return (Criteria) this;
        }

        public Criteria andWellTextNotBetween(Integer value1, Integer value2) {
            addCriterion("well_text not between", value1, value2, "wellText");
            return (Criteria) this;
        }

        public Criteria andFracturingIsNull() {
            addCriterion("fracturing is null");
            return (Criteria) this;
        }

        public Criteria andFracturingIsNotNull() {
            addCriterion("fracturing is not null");
            return (Criteria) this;
        }

        public Criteria andFracturingEqualTo(Integer value) {
            addCriterion("fracturing =", value, "fracturing");
            return (Criteria) this;
        }

        public Criteria andFracturingNotEqualTo(Integer value) {
            addCriterion("fracturing <>", value, "fracturing");
            return (Criteria) this;
        }

        public Criteria andFracturingGreaterThan(Integer value) {
            addCriterion("fracturing >", value, "fracturing");
            return (Criteria) this;
        }

        public Criteria andFracturingGreaterThanOrEqualTo(Integer value) {
            addCriterion("fracturing >=", value, "fracturing");
            return (Criteria) this;
        }

        public Criteria andFracturingLessThan(Integer value) {
            addCriterion("fracturing <", value, "fracturing");
            return (Criteria) this;
        }

        public Criteria andFracturingLessThanOrEqualTo(Integer value) {
            addCriterion("fracturing <=", value, "fracturing");
            return (Criteria) this;
        }

        public Criteria andFracturingIn(List<Integer> values) {
            addCriterion("fracturing in", values, "fracturing");
            return (Criteria) this;
        }

        public Criteria andFracturingNotIn(List<Integer> values) {
            addCriterion("fracturing not in", values, "fracturing");
            return (Criteria) this;
        }

        public Criteria andFracturingBetween(Integer value1, Integer value2) {
            addCriterion("fracturing between", value1, value2, "fracturing");
            return (Criteria) this;
        }

        public Criteria andFracturingNotBetween(Integer value1, Integer value2) {
            addCriterion("fracturing not between", value1, value2, "fracturing");
            return (Criteria) this;
        }

        public Criteria andLogIsNull() {
            addCriterion("log is null");
            return (Criteria) this;
        }

        public Criteria andLogIsNotNull() {
            addCriterion("log is not null");
            return (Criteria) this;
        }

        public Criteria andLogEqualTo(Integer value) {
            addCriterion("log =", value, "log");
            return (Criteria) this;
        }

        public Criteria andLogNotEqualTo(Integer value) {
            addCriterion("log <>", value, "log");
            return (Criteria) this;
        }

        public Criteria andLogGreaterThan(Integer value) {
            addCriterion("log >", value, "log");
            return (Criteria) this;
        }

        public Criteria andLogGreaterThanOrEqualTo(Integer value) {
            addCriterion("log >=", value, "log");
            return (Criteria) this;
        }

        public Criteria andLogLessThan(Integer value) {
            addCriterion("log <", value, "log");
            return (Criteria) this;
        }

        public Criteria andLogLessThanOrEqualTo(Integer value) {
            addCriterion("log <=", value, "log");
            return (Criteria) this;
        }

        public Criteria andLogIn(List<Integer> values) {
            addCriterion("log in", values, "log");
            return (Criteria) this;
        }

        public Criteria andLogNotIn(List<Integer> values) {
            addCriterion("log not in", values, "log");
            return (Criteria) this;
        }

        public Criteria andLogBetween(Integer value1, Integer value2) {
            addCriterion("log between", value1, value2, "log");
            return (Criteria) this;
        }

        public Criteria andLogNotBetween(Integer value1, Integer value2) {
            addCriterion("log not between", value1, value2, "log");
            return (Criteria) this;
        }

        public Criteria andDepthCorrectionIsNull() {
            addCriterion("depth_correction is null");
            return (Criteria) this;
        }

        public Criteria andDepthCorrectionIsNotNull() {
            addCriterion("depth_correction is not null");
            return (Criteria) this;
        }

        public Criteria andDepthCorrectionEqualTo(Integer value) {
            addCriterion("depth_correction =", value, "depthCorrection");
            return (Criteria) this;
        }

        public Criteria andDepthCorrectionNotEqualTo(Integer value) {
            addCriterion("depth_correction <>", value, "depthCorrection");
            return (Criteria) this;
        }

        public Criteria andDepthCorrectionGreaterThan(Integer value) {
            addCriterion("depth_correction >", value, "depthCorrection");
            return (Criteria) this;
        }

        public Criteria andDepthCorrectionGreaterThanOrEqualTo(Integer value) {
            addCriterion("depth_correction >=", value, "depthCorrection");
            return (Criteria) this;
        }

        public Criteria andDepthCorrectionLessThan(Integer value) {
            addCriterion("depth_correction <", value, "depthCorrection");
            return (Criteria) this;
        }

        public Criteria andDepthCorrectionLessThanOrEqualTo(Integer value) {
            addCriterion("depth_correction <=", value, "depthCorrection");
            return (Criteria) this;
        }

        public Criteria andDepthCorrectionIn(List<Integer> values) {
            addCriterion("depth_correction in", values, "depthCorrection");
            return (Criteria) this;
        }

        public Criteria andDepthCorrectionNotIn(List<Integer> values) {
            addCriterion("depth_correction not in", values, "depthCorrection");
            return (Criteria) this;
        }

        public Criteria andDepthCorrectionBetween(Integer value1, Integer value2) {
            addCriterion("depth_correction between", value1, value2, "depthCorrection");
            return (Criteria) this;
        }

        public Criteria andDepthCorrectionNotBetween(Integer value1, Integer value2) {
            addCriterion("depth_correction not between", value1, value2, "depthCorrection");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table test
     *
     * @mbg.generated do_not_delete_during_merge Tue Jul 30 21:22:56 CST 2019
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table test
     *
     * @mbg.generated Tue Jul 30 21:22:56 CST 2019
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}